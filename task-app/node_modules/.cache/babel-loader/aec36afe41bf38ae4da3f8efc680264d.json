{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marye\\\\Desktop\\\\task_project\\\\task-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nrequire(\"dotenv\").config;\nimport Modal from 'react-modal';\nimport Button from '@material-ui/core/Button';\nimport TaskList from './components/TaskList/TaskList';\nimport CreateTask from './components/CreateTask/CreateTask';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiUrl = process.env.API_URL;\n\nfunction App() {\n  _s();\n\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggleModal = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const saveTask = () => {\n    setIsOpen(false);\n    window.location.reload();\n  };\n\n  const deleteTask = id => {\n    const options = {\n      method: 'POST'\n    };\n    fetch(`${apiUrl}/tasks/delete/${id}`, options).then(result => {\n      setIsLoaded(true);\n      window.location.reload();\n    }, error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  };\n\n  useEffect(() => {\n    fetch(`${apiUrl}/tasks`).then(res => res.json()).then(result => {\n      setIsLoaded(true);\n      setTasks(result);\n    }, error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, []);\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 10\n    }, this);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 10\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Tasks Manager\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n          tasks: tasks,\n          deleteTask: deleteTask,\n          saveTask: saveTask\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: toggleModal,\n          children: \"Create Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Modal, {\n          isOpen: isOpen,\n          onRequestClose: toggleModal,\n          contentLabel: \"My dialog\",\n          children: [/*#__PURE__*/_jsxDEV(CreateTask, {\n            saveTask: saveTask\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            id: \"button\",\n            variant: \"contained\",\n            size: \"small\",\n            onClick: toggleModal,\n            children: \"Close modal\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 4\n    }, this);\n  }\n}\n\n_s(App, \"W7N2icXZ8uTMRpQ9Uxm/ORhGeUc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/marye/Desktop/task_project/task-app/src/App.js"],"names":["React","useState","useEffect","require","config","Modal","Button","TaskList","CreateTask","apiUrl","process","env","API_URL","App","error","setError","isLoaded","setIsLoaded","tasks","setTasks","isOpen","setIsOpen","toggleModal","saveTask","window","location","reload","deleteTask","id","options","method","fetch","then","result","res","json","message"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nrequire(\"dotenv\").config\nimport Modal from 'react-modal';\nimport Button from '@material-ui/core/Button';\nimport TaskList from './components/TaskList/TaskList';\nimport CreateTask from './components/CreateTask/CreateTask';\nimport './App.css';\nconst apiUrl = process.env.API_URL;\n\n\nfunction App() {\n\tconst [error, setError] = useState(null);\n\tconst [isLoaded, setIsLoaded] = useState(false);\n\tconst [tasks, setTasks] = useState([]);\n\tconst [isOpen, setIsOpen] = useState(false);\n\n\tconst toggleModal = () => {\n\t\tsetIsOpen(!isOpen);\n\t};\n\n\tconst saveTask = () => {\n\t\tsetIsOpen(false);\n\t\twindow.location.reload();\n\t};\n\n\tconst deleteTask = (id) => {\n\t\tconst options = {\n\t\t\tmethod: 'POST',\n\t\t};\n\n\t\tfetch(`${apiUrl}/tasks/delete/${id}`, options).then(\n\t\t\t(result) => {\n\t\t\t\tsetIsLoaded(true);\n\t\t\t\twindow.location.reload();\n\t\t\t},\n\t\t\t(error) => {\n\t\t\t\tsetIsLoaded(true);\n\t\t\t\tsetError(error);\n\t\t\t}\n\t\t);\n\t};\n\n\tuseEffect(() => {\n\t\tfetch(`${apiUrl}/tasks`)\n\t\t\t.then((res) => res.json())\n\t\t\t.then(\n\t\t\t\t(result) => {\n\t\t\t\t\tsetIsLoaded(true);\n\t\t\t\t\tsetTasks(result);\n\t\t\t\t},\n\t\t\t\t(error) => {\n\t\t\t\t\tsetIsLoaded(true);\n\t\t\t\t\tsetError(error);\n\t\t\t\t}\n\t\t\t);\n\t}, []);\n\n\tif (error) {\n\t\treturn <div>Error: {error.message}</div>;\n\t} else if (!isLoaded) {\n\t\treturn <div>Loading...</div>;\n\t} else {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t<h1>Tasks Manager</h1>\n\t\t\t\t\t<TaskList tasks={tasks} deleteTask={deleteTask} saveTask={saveTask} />\n\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={toggleModal}>\n\t\t\t\t\t\tCreate Task\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Modal\n\t\t\t\t\t\tisOpen={isOpen}\n\t\t\t\t\t\tonRequestClose={toggleModal}\n\t\t\t\t\t\tcontentLabel=\"My dialog\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<CreateTask saveTask={saveTask} />\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tid=\"button\"\n\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\tonClick={toggleModal}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tClose modal\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Modal>\n\t\t\t\t</header>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
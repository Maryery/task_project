{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marye\\\\Desktop\\\\task_project\\\\task-app\\\\src\\\\components\\\\TaskList\\\\TaskList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport * as S from './styles';\nimport Modal from 'react-modal';\nimport Button from '@material-ui/core/Button';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport UpdateTask from '../UpdateTask/UpdateTask';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TaskList = ({\n  tasks,\n  deleteTask,\n  saveTask\n}) => {\n  _s();\n\n  const handleDelete = id => {\n    deleteTask(id);\n  };\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggleModal = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const [currentTask, setCurrentTask] = useState(null);\n  console.log(currentTask);\n\n  const handleUpdate = t => {\n    setCurrentTask(t);\n    toggleModal();\n  };\n\n  return /*#__PURE__*/_jsxDEV(S.TaskList, {\n    children: [tasks.map(task => /*#__PURE__*/_jsxDEV(S.TaskCard, {\n      children: [/*#__PURE__*/_jsxDEV(CardActionArea, {\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: /*#__PURE__*/_jsxDEV(S.TaskContainer, {\n            children: [/*#__PURE__*/_jsxDEV(S.Title, {\n              children: task.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Priority:\", task.priority]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 9\n            }, this), task.state === \"high\" && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(S.HighCircle, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 38,\n                columnNumber: 15\n              }, this), task.state]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 10\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Finish date:\", task.finish_date]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(S.ButtonContainer, {\n        children: [/*#__PURE__*/_jsxDEV(S.ButtonContent, {\n          variant: \"contained\",\n          onClick: () => {\n            handleUpdate(task);\n          },\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(S.ButtonContent, {\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: () => {\n            handleDelete(task._id);\n          },\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }, this)), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isOpen,\n      onRequestClose: toggleModal,\n      contentLabel: \"My dialog\",\n      children: [/*#__PURE__*/_jsxDEV(UpdateTask, {\n        task: currentTask,\n        saveTask: saveTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        id: \"button\",\n        variant: \"contained\",\n        size: \"small\",\n        onClick: toggleModal,\n        children: \"Close modal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 3\n  }, this);\n};\n\n_s(TaskList, \"EyRin9IgJRF48al8+NVDUaEbn4I=\");\n\n_c = TaskList;\nexport default TaskList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"sources":["C:/Users/marye/Desktop/task_project/task-app/src/components/TaskList/TaskList.js"],"names":["React","useState","S","Modal","Button","CardActionArea","CardContent","UpdateTask","TaskList","tasks","deleteTask","saveTask","handleDelete","id","isOpen","setIsOpen","toggleModal","currentTask","setCurrentTask","console","log","handleUpdate","t","map","task","title","priority","state","finish_date","_id"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport * as S from './styles';\r\nimport Modal from 'react-modal';\r\nimport Button from '@material-ui/core/Button';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport UpdateTask from '../UpdateTask/UpdateTask';\r\n\r\nconst TaskList = ({ tasks, deleteTask, saveTask }) => {\r\n\r\n\tconst handleDelete = (id) => {\r\n\t\tdeleteTask(id);\r\n\t};\r\n\r\n\tconst [isOpen, setIsOpen] = useState(false);\r\n\tconst toggleModal = () => {\r\n\t\tsetIsOpen(!isOpen);\r\n\t};\r\n\r\n\tconst [currentTask, setCurrentTask] = useState(null);\r\n\r\n\tconsole.log(currentTask)\r\n\tconst handleUpdate = (t) => {\r\n\t\tsetCurrentTask(t);\r\n\t\ttoggleModal();\r\n\t};\r\n\r\n\treturn (\r\n\t\t<S.TaskList>\r\n\t\t\t{tasks.map((task) => (\r\n\t\t\t\t<S.TaskCard>\r\n\t\t\t\t\t<CardActionArea>\r\n\t\t\t\t\t\t<CardContent>\r\n\t\t\t\t\t\t\t<S.TaskContainer>\r\n\t\t\t\t\t\t\t\t<S.Title>{task.title}</S.Title>\r\n\t\t\t\t\t\t\t\t<div>Priority:{task.priority}</div>\r\n\t\t\t\t\t\t\t\t {task.state === \"high\"&& (\r\n\t\t\t\t\t\t\t\t\t<div><S.HighCircle></S.HighCircle>{task.state}</div>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t{/* if (task.state === \"medium\"){\r\n\t\t\t\t\t\t\t\t\t<div><S.MediumCircle></S.MediumCircle>{task.state}</div>\r\n\t\t\t\t\t\t\t\t} if (task.this.state. === \"low\"){\r\n\t\t\t\t\t\t\t\t\t\t<div><S.LowCircle></S.LowCircle>{task.state}</div>\r\n\t\t\t\t\t\t\t\t} */}\r\n\t\t\t\t\t\t\t\t<div>Finish date:{task.finish_date}</div>\r\n\t\t\t\t\t\t\t</S.TaskContainer>\r\n\t\t\t\t\t\t</CardContent>\r\n\t\t\t\t\t</CardActionArea>\r\n\t\t\t\t\t<S.ButtonContainer>\r\n\t\t\t\t\t\t<S.ButtonContent variant=\"contained\" onClick={()=> {handleUpdate(task)}}>\r\n\t\t\t\t\t\t\tEdit\r\n\t\t\t\t\t\t</S.ButtonContent>\r\n\t\t\t\t\t\t<S.ButtonContent\r\n\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\tcolor=\"secondary\"\r\n\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\thandleDelete(task._id);\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tDelete\r\n\t\t\t\t\t\t</S.ButtonContent>\r\n\t\t\t\t\t</S.ButtonContainer>\r\n\t\t\t\t</S.TaskCard>\r\n\t\t\t))}\r\n\t\t\t<Modal\r\n\t\t\t\tisOpen={isOpen}\r\n\t\t\t\tonRequestClose={toggleModal}\r\n\t\t\t\tcontentLabel=\"My dialog\"\r\n\t\t\t>\r\n\t\t\t\t<UpdateTask\r\n\t\t\t\t\ttask={currentTask}\r\n\t\t\t\t\tsaveTask={saveTask}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tid=\"button\"\r\n\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\tsize=\"small\"\r\n\t\t\t\t\tonClick={toggleModal}\r\n\t\t\t\t>\r\n\t\t\t\t\tClose modal\r\n\t\t\t\t</Button>\r\n\t\t\t</Modal>\r\n\t\t</S.TaskList>\r\n\t);\r\n};\r\n\r\nexport default TaskList;\r\n"]},"metadata":{},"sourceType":"module"}